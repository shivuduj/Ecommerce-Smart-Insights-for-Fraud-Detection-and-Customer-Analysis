--Create a Database & Schema
CREATE DATABASE ECOMMERCE_INSIGHTS;
USE DATABASE ECOMMERCE_INSIGHTS;

CREATE SCHEMA RAW_DATA;
CREATE SCHEMA PROCESSED_DATA;
CREATE SCHEMA ANALYTICS;


--Create Tables for customers
CREATE TABLE RAW_DATA.CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    NAME STRING,
    EMAIL STRING,
    COUNTRY STRING,
    JOIN_DATE DATE
);


--create table for transactions
CREATE TABLE RAW_DATA.TRANSACTIONS (
    TRANSACTION_ID INT PRIMARY KEY,
    CUSTOMER_ID INT,
    AMOUNT DECIMAL(10,2),
    TRANSACTION_DATE DATE,
    PAYMENT_METHOD STRING,
    STATUS STRING
);


--create table for web logs
CREATE OR REPLACE TABLE RAW_DATA.WEB_LOGS_RAW (DATA VARIANT);

--create table for fraud rules
CREATE TABLE RAW_DATA.FRAUD_RULES (
    RULE_ID INT PRIMARY KEY,
    RULE_NAME STRING,
    CONDITION STRING
);


-- Create a Stage to store files
CREATE OR REPLACE STAGE ECOMMERCE_STAGE;

--Load Customers Data
COPY INTO RAW_DATA.CUSTOMERS  
FROM @ECOMMERCE_STAGE/customers_large.csv  
FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER = 1);

--load transcations data
COPY INTO RAW_DATA.TRANSACTIONS  
FROM @ECOMMERCE_STAGE/transactions_large.csv  
FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER = 1);

--load  web logs data
COPY INTO RAW_DATA.WEB_LOGS_RAW  
FROM @ECOMMERCE_STAGE/web_logs_large.json  
FILE_FORMAT = RAW_DATA.JSON_FORMAT;

--load fraud data
COPY INTO RAW_DATA.FRAUD_RULES  
FROM @ECOMMERCE_STAGE/fraud_rules_large.csv  
FILE_FORMAT = (TYPE = 'CSV' SKIP_HEADER = 1);


SELECT COUNT(*) FROM RAW_DATA.CUSTOMERS;
SELECT COUNT(*) FROM RAW_DATA.TRANSACTIONS;
SELECT COUNT(*) FROM RAW_DATA.WEB_LOGS;
SELECT COUNT(*) FROM RAW_DATA.FRAUD_RULES;

--Identify High-Value Customers
SELECT CUSTOMER_ID, SUM(AMOUNT) AS TOTAL_SPENT, COUNT(*) AS TRANSACTION_COUNT
FROM RAW_DATA.TRANSACTIONS
GROUP BY CUSTOMER_ID
HAVING TOTAL_SPENT > 5000;


--Find Customers at Risk of Churn
--Customers who haven’t purchased in 6+ months → Churn risk
SELECT CUSTOMER_ID, MAX(TRANSACTION_DATE) AS LAST_PURCHASE_DATE
FROM RAW_DATA.TRANSACTIONS
GROUP BY CUSTOMER_ID
HAVING LAST_PURCHASE_DATE < DATEADD(MONTH, -6, CURRENT_DATE);


--Find high-value or failed transactions.
SELECT TRANSACTION_ID, CUSTOMER_ID, AMOUNT, STATUS
FROM RAW_DATA.TRANSACTIONS
WHERE AMOUNT > 5000 OR STATUS = 'FAILED';


--customer activiy summary
SELECT 
    COUNT(DISTINCT CASE WHEN TRANSACTION_DATE >= DATEADD(MONTH, -3, CURRENT_DATE) THEN CUSTOMER_ID END) AS ACTIVE_CUSTOMERS,
    COUNT(DISTINCT CASE WHEN TRANSACTION_DATE < DATEADD(MONTH, -3, CURRENT_DATE) THEN CUSTOMER_ID END) AS INACTIVE_CUSTOMERS
FROM RAW_DATA.TRANSACTIONS;


--Daily Fraud Detection Automation
--This runs every day at 12:00 AM UTC.
CREATE OR REPLACE TASK DETECT_FRAUD_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = 'USING CRON 0 0 * * * UTC'
AS
INSERT INTO ANALYTICS.FRAUD_ALERTS
SELECT TRANSACTION_ID, CUSTOMER_ID, AMOUNT, TRANSACTION_DATE, STATUS
FROM RAW_DATA.TRANSACTIONS
WHERE AMOUNT > 5000 OR STATUS = 'FAILED';


--enable task
ALTER TASK DETECT_FRAUD_TASK RESUME;

--manually trigger for testing
EXECUTE TASK DETECT_FRAUD_TASK;

--check task execution history
SHOW TASKS;


--remove duplicates in the transactions
DELETE FROM RAW_DATA.TRANSACTIONS
WHERE TRANSACTION_ID IN (
    SELECT TRANSACTION_ID FROM (
        SELECT TRANSACTION_ID, ROW_NUMBER() OVER (PARTITION BY TRANSACTION_ID ORDER BY TRANSACTION_DATE DESC) AS rn
        FROM RAW_DATA.TRANSACTIONS
    ) WHERE rn > 1
);

--standardise transaction status
--Converts all status values to uppercase for consistency.
UPDATE RAW_DATA.TRANSACTIONS
SET STATUS = UPPER(STATUS);

--Create a Customer Summary Table
--helps in customer behaviour analysis
CREATE OR REPLACE TABLE ANALYTICS.CUSTOMER_SUMMARY AS
SELECT 
    CUSTOMER_ID,
    COUNT(TRANSACTION_ID) AS TOTAL_TRANSACTIONS,
    SUM(AMOUNT) AS TOTAL_SPENT,
    MIN(TRANSACTION_DATE) AS FIRST_PURCHASE,
    MAX(TRANSACTION_DATE) AS LAST_PURCHASE
FROM RAW_DATA.TRANSACTIONS
GROUP BY CUSTOMER_ID;


--create fraud insights table
--Classifies transactions as potential fraud cases.
CREATE OR REPLACE TABLE ANALYTICS.FRAUD_INSIGHTS AS
SELECT 
    T.TRANSACTION_ID,
    T.CUSTOMER_ID,
    T.AMOUNT,
    T.TRANSACTION_DATE,
    T.STATUS,
    CASE 
        WHEN T.AMOUNT > 5000 THEN 'HIGH VALUE'
        WHEN T.STATUS = 'FAILED' THEN 'FAILED TRANSACTION'
        ELSE 'NORMAL'
    END AS FRAUD_CATEGORY
FROM RAW_DATA.TRANSACTIONS T;

--tracks daily revenue trends
CREATE OR REPLACE TABLE ANALYTICS.DAILY_TRANSACTION_SUMMARY AS
SELECT 
    TRANSACTION_DATE,
    COUNT(*) AS TOTAL_TRANSACTIONS,
    SUM(AMOUNT) AS TOTAL_REVENUE
FROM RAW_DATA.TRANSACTIONS
GROUP BY TRANSACTION_DATE;

